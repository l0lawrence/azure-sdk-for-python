{{- include "stress-test-addons.deploy-job-template.from-pod" (list . "stress.python-sb-stress") -}}
{{- define "stress.python-sb-stress" -}}
metadata:
  labels:
    testName: "deploy-python-sb-stress"
    testInstance: "servicebus-{{ .Release.Name }}-{{ .Release.Revision }}"
    chaos: "{{ default false .Stress.chaos }}"
spec:
  containers:
    - name: python-sb-stress
      image: {{ .Stress.imageTag }}
      imagePullPolicy: Always
      resources:
        limits:
          memory: "2000Mi"
          cpu: "1"

      {{ if eq .Stress.testTarget "queue" }}
      command: ['bash', '-c', 'python test_stress_queues.py --method send_receive --duration 300000 --logging-enable']
      {{- end -}}

      {{ if eq .Stress.testTarget "queuepull" }}
      command: ['bash', '-c', 'python test_stress_queues.py --method send_pull_receive --duration 300000 --logging-enable']
      {{- end -}}

      {{- include "stress-test-addons.container-env" . | nindent 6 }}
{{- end -}}


{{- include "stress-test-addons.chaos-wrapper.tpl" (list . "stress.network-chaos") -}}
{{- define "stress.network-chaos" -}}
# basically: every 15 minutes do 30s of network loss
kind: Schedule
apiVersion: chaos-mesh.org/v1alpha1
spec:
  selector:
    namespaces:
      - "{{ .Release.Namespace }}"
    labelSelectors:
      testInstance: "servicebus-{{ .Release.Name }}-{{ .Release.Revision }}"
      chaos: "true"
  schedule: "*/1 * * * *"
  startingDeadlineSeconds: null
  concurrencyPolicy: Allow
  historyLimit: 1
  type: NetworkChaos
  networkChaos:
    selector:
      namespaces:
        - "{{ .Release.Namespace }}"
      labelSelectors:
        testInstance: "servicebus-{{ .Release.Name }}-{{ .Release.Revision }}"
        chaos: "true"
    mode: all
    action: loss
    duration: 10s
    loss:
      loss: '100'
      correlation: '100'
    direction: to
    externalTargets:
      - {{ .Stress.BaseName }}.servicebus.windows.net
{{- end -}}

